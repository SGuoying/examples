# Use this YAML to verify that UL2 pre-training works. Runs on CPU or GPUs (if available).
# From `examples/ul2`, run:
#   `composer main.py yamls/test/ul2-t5.yaml` to run using a HuggingFace T5

data_remote: &data_remote ./my-copy-c4 # Follow the instructions in the README to set up ./my-copy-c4
data_local: &data_local ./my-copy-c4
tokenizer_name: &tokenizer_name t5-small
max_seq_len: &max_seq_len 128
group_method: truncate
mixture_of_denoisers: &mixture_of_denoisers
  decoder_only_format: false
  span_mean_lengths_and_ratios: [[3, .15], [12, .15]]
  sequence_mask_ratios: 0.25

# Run Name
run_name: test

# Model
model:
  name: hf_t5
  use_pretrained: true # Train the model from scratch. Set to true to start from the HF off-the-shelf weights.
  pretrained_model_name: *tokenizer_name
  tokenizer_name: *tokenizer_name
  z_loss: 0.0001

# Dataloaders
train_loader:
  name: text_denoising
  dataset:
    remote: *data_remote
    local: *data_local
    split: val
    tokenizer_name: *tokenizer_name
    max_seq_len: *max_seq_len
    group_method: ${group_method}
    prefetch: 1000
    shuffle: true
  mixture_of_denoisers: *mixture_of_denoisers
  drop_last: true
  num_workers: 0
  pin_memory: true
  prefetch_factor: 2
  persistent_workers: false
  timeout: 0

eval_loader:
  name: text_denoising
  dataset:
    remote: *data_remote
    local: *data_local
    split: val
    tokenizer_name: *tokenizer_name
    max_seq_len: *max_seq_len
    group_method: ${group_method}
    prefetch: 1000
    shuffle: false
  mixture_of_denoisers: *mixture_of_denoisers
  drop_last: false
  num_workers: 0
  pin_memory: true
  prefetch_factor: 2
  persistent_workers: false
  timeout: 0

global_train_batch_size: 4

# Optimization
scheduler:
  name: inverse_square_root # UL2 paper calls for inverse square root scheduler
  alpha_max: 0.01

optimizer:
  name: adafactor # UL2 paper calls for Adafactor w/ unknown HPs
  lr: 1.0 # Actual LR determined by scheduler
  weight_decay: 0.0 # Amount of weight decay regularization
  scale_parameter: true


# Training duration and evaluation frequency
max_duration: 10ba
eval_interval: 10ba
eval_subset_num_batches: 20 # For code testing, evaluate on a subset of 20 batches

# System
seed: 17
device_eval_batch_size: 4
device_train_microbatch_size: 4
precision: fp32

# Logging
progress_bar: true
log_to_console: true

callbacks:
  lr_monitor: {}
  mod_printer:
    print_frequency: 5
    max_length: *max_seq_len
    tokenizer_name: *tokenizer_name
